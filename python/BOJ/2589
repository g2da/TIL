import sys
from collections import deque

N, M = map(int, sys.stdin.readline().split())
arr = [list(map(str, sys.stdin.readline().strip())) for _ in range(N)]
visited = [[0] * M for _ in range(N)]
dy, dx = [-1, 1, 0, 0], [0, 0, -1, 1]
max_ans = 0


def bfs(arr, y, x, visited):
    q = deque()
    q.append((y, x))
    visited[y][x] = 1
    max_cnt = 0
    while q:
        y, x = q.popleft()
        for i in range(4):
            ny, nx = dy[i] + y, dx[i] + x
            if ny < 0 or nx < 0 or ny >= N or nx >= M:
                continue
            if not visited[ny][nx] and arr[ny][nx] == 'L':
                visited[ny][nx] = visited[y][x] + 1
                q.append((ny, nx))
                max_cnt = max(max_cnt, visited[ny][nx])
    return max_cnt


for i in range(N):
    for j in range(M):
        visited = [[0] * M for _ in range(N)]
        if arr[i][j] == 'L':
            tmp_ans = bfs(arr, i, j, visited)
            max_ans = max(max_ans, tmp_ans)  # 다 돌면서 노드 간의 이동이 max인 값 가져옴

print(max_ans - 1)
