from collections import deque

N, M, T = map(int, input().split())
arr = [deque(map(int, input().split())) for _ in range(N)]

for _ in range(T):
    x, d, k = map(int, input().split())
    res = 0
    ans = 0

    if d:
        for j in range(N):
            res += sum(arr[j])
            if (j + 1) % x == 0:
                arr[j].rotate(-k)
    elif not d:
        for j in range(N):
            res += sum(arr[j])
            if (j + 1) % x == 0:
                arr[j].rotate(k)

    if res != 0:  # 원판에 수가 있으면 인접한 같은 수를 찾는다
        have_to_remove = []
        # 원 안에서 찾기
        for i in range(N):
            for j in range(M - 1):
                if arr[i][j] != 0 and arr[i][j + 1] != 0 and arr[i][j] == arr[i][j + 1]:
                    have_to_remove.append((i, j))
                    have_to_remove.append((i, j + 1))
            if arr[i][0] and arr[i][-1] and arr[i][0] == arr[i][-1]:
                have_to_remove.append((i, 0))
                have_to_remove.append((i, M - 1))

        # 회전해서 인접찾기
        for j in range(M):
            for i in range(N - 1):
                if arr[i][j] != 0 and arr[i + 1][j] != 0 and arr[i][j] == arr[i + 1][j]:
                    have_to_remove.append((i, j))
                    have_to_remove.append((i + 1, j))

        # 원판 clear
        have_to_remove = list(set(have_to_remove))

        for i in range(len(have_to_remove)):
            x, y = have_to_remove[i]
            arr[x][y] = 0

        avg_sum = 0
        zero_cnt = 0
        if len(have_to_remove) == 0:
            for i in range(N):
                avg_sum += sum(arr[i])
                zero_cnt += arr[i].count(0)
            avg = avg_sum / (N * M - zero_cnt)
            for i in range(N):
                for j in range(M):
                    if arr[i][j] > avg and arr[i][j] != 0:
                        arr[i][j] -= 1
                    elif arr[i][j] < avg and arr[i][j] != 0:
                        arr[i][j] += 1
    else:
        break

    for i in range(N):
        ans += sum(arr[i])

print(ans)
