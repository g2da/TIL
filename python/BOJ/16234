import sys
from collections import deque

N, L, R = map(int, sys.stdin.readline().split())
arr = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]
dy, dx = [-1, 1, 0, 0], [0, 0, -1, 1]
ans = 0


def bfs(arr, y, x, visited):
    q = deque()
    q.append((y, x))
    tmp = []
    tmp.append((y, x))
    while q:
        y, x = q.popleft()
        for i in range(4):
            ny, nx = dy[i] + y, dx[i] + x
            if ny < 0 or nx < 0 or ny >= N or nx >= N:
                continue
            if not visited[ny][nx] and L <= abs(arr[ny][nx] - arr[y][x]) <= R:
                visited[ny][nx] = 1
                q.append((ny, nx))
                tmp.append((ny, nx))
    return tmp


while True:
    avg = 0
    visited = [[0] * N for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if not visited[i][j]:
                visited[i][j] = 1
                tmp = bfs(arr, i, j, visited)
                if 1 < len(tmp):
                    avg = sum([arr[y][x] for y, x in tmp]) // len(tmp)
                    for y, x in tmp:
                        arr[y][x] = avg
    if not avg:
        break
    else:
        ans += 1

print(ans)
